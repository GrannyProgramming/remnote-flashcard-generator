# ML System Design - Flashcard Collection
# Generated by RemNote Card Generator

# System Design Patterns
    Microservices Architecture :: Architectural pattern that structures an application as a collection of loosely coupled services #architecture #patterns

# Data Patterns
    Event Sourcing ::: Data storage pattern that stores state changes as events\nProvides complete audit trail\nEnables event replay and temporal queries\nSupports CQRS pattern implementation #events #data_storage

# Scalability Patterns
    What is the main advantage of horizontal scaling? >> Better fault tolerance and ability to handle increased load by adding more machines #scaling
    What is the difference between vertical and horizontal scaling? >> Vertical scaling adds more power to existing machines, horizontal scaling adds more machines
        Extra Card Detail:: Vertical scaling has hardware limits and single points of failure, while horizontal scaling provides better fault tolerance but increases complexity. #scaling

# Consistency Models
    When should you use eventual consistency? >> In distributed systems where availability is more important than immediate consistency #consistency #distributed_systems

# Microservices Architecture
    purpose ;; Enable independent development, deployment, and scaling of application components #purpose
    benefits ;; Technology diversity, fault isolation, independent scaling, team autonomy #benefits
    challenges ;; Distributed system complexity, network latency, data consistency, monitoring overhead #challenges
    What are the key components of a typical microservices architecture? >>
    1. API Gateway - Single entry point for client requests
    2. Service Registry - Directory of available services
    3. Load Balancer - Distributes requests across service instances
    4. Message Broker - Handles asynchronous communication
    5. Configuration Server - Centralized configuration management #components

# Distributed Systems
    The \{{CAP Theorem\}} states that distributed systems can guarantee at most \{{two\}} of: \{{Consistency\}}, \{{Availability\}}, and \{{Partition tolerance\}} #theorems
    High availability, eventual consistency, partition tolerance << What does the AP in CAP theorem stand for? #cap_theorem

# Load Balancing
    Load balancers distribute incoming requests across \{{multiple servers\}} to prevent \{{overload\}} and improve \{{availability\}} #load_balancing

# Database Scaling
    What are the main database scaling strategies? >>
    1. Vertical Scaling - Increase hardware capacity
    2. Read Replicas - Create read-only copies
    3. Sharding - Partition data across multiple databases
    4. Caching - Store frequently accessed data in memory #scaling #databases
    Database Sharding :: Horizontal partitioning technique that splits data across multiple database instances
        Extra Card Detail:: Each shard contains a subset of data based on a sharding key. Common strategies include range-based, hash-based, and directory-based sharding. #sharding #databases

# Data Processing Patterns
    Which pattern is best for handling high-throughput data processing? >>
    A) Event Streaming (Apache Kafka)
    B) REST API polling
    C) Database triggers
    D) File-based batch processing #streaming #performance

# Content Delivery
    What is the primary benefit of using a CDN? >>
    A) Reduced latency by serving content from edge locations
    B) Increased server processing power
    C) Better database performance
    D) Enhanced security through encryption #cdn #performance
